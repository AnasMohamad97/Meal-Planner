type: edu
files:
- name: src/mealplanner/Main.java
  visible: true
  text: |-
    package mealplanner;

    public class Main {
      public static void main(String[] args) {
        System.out.println("Hello World!");
      }
    }
  learner_created: false
- name: test/MealPlannerTests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.sql.*;
    import java.util.*;

    class Column {
      public String first;
      public String second;

      public Column(String first, String second) {
        this.first = first;
        this.second = second;
      }

      @Override
      public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Column column = (Column) o;
        return Objects.equals(first, column.first) && Objects.equals(second, column.second);
      }

      @Override
      public int hashCode() {
        return Objects.hash(first, second);
      }
    }

    class dbTable {
      String name;
      List<Column> columnNameType;

      public dbTable(String name, List<Column> columnNameType) {
        this.name = name;
        this.columnNameType = columnNameType;
      }
    }

    class MyMealTestData {
      String mealCategory;
      String mealName;
      String[] ingredients;

      MyMealTestData(String mealCategory, String mealName, String[] ingredients) {
        this.mealCategory = mealCategory;
        this.mealName = mealName;
        this.ingredients = ingredients;
      }
    }

    public class MealPlannerTests extends StageTest {

      static final String DB_URL = "jdbc:postgresql:meals_db";
      static final String USER = "postgres";
      static final String PASS = "1111";

      String[] days = new String[]{"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};

      static final MyMealTestData[] mealsList = new MyMealTestData[]{
              new MyMealTestData("breakfast", "scrambled eggs", new String[]{"eggs", "milk", "cheese"}),
              new MyMealTestData("breakfast", "sandwich", new String[]{"bread", "cheese", "ham"}),
              new MyMealTestData("breakfast", "oatmeal", new String[]{"oats", "milk", "banana", "peanut butter"}),
              new MyMealTestData("breakfast", "english breakfast", new String[]{"eggs", "sausages", "bacon", "tomatoes",
                      "bread"}),
              new MyMealTestData("lunch", "sushi", new String[]{"salmon", "rice", "avocado"}),
              new MyMealTestData("lunch", "chicken salad", new String[]{"chicken", "lettuce", "tomato", "olives"}),
              new MyMealTestData("lunch", "omelette", new String[]{"eggs", "milk", "cheese"}),
              new MyMealTestData("lunch", "salad", new String[]{"lettuce", "tomato", "onion", "cheese", "olives"}),
              new MyMealTestData("dinner", "pumpkin soup", new String[]{"pumpkin", "coconut milk", "curry", "carrots"}),
              new MyMealTestData("dinner", "beef steak", new String[]{"beef steak"}),
              new MyMealTestData("dinner", "pizza", new String[]{"flour", "tomato", "cheese", "salami"}),
              new MyMealTestData("dinner", "tomato soup", new String[]{"tomato", "orzo"})
      };

      void checkTableSchema(List<dbTable> tables) {
        try {
          Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);
          DatabaseMetaData meta = connection.getMetaData();
          for (dbTable table : tables) {
            ResultSet tableMeta = meta.getTables(null, null, table.name, null);
            if (!tableMeta.next() || !table.name.equalsIgnoreCase(tableMeta.getString("TABLE_NAME"))) {
              throw new WrongAnswer("The table \"" + table.name + "\" doesn't exist.");
            }
            ResultSet columns = meta.getColumns(null, null, table.name, null);
            List<Column> columnsData = new ArrayList<>();
            while (columns.next()) {
              Column column = new Column(
                      columns.getString("COLUMN_NAME").toLowerCase(),
                      columns.getString("TYPE_NAME").toLowerCase());
              columnsData.add(column);
            }
            for (Column c : table.columnNameType) {
              if (!columnsData.contains(c)) {
                for (Column c2 : columnsData) {
                  if (c.first.equals(c2.first)) {
                    throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" is of the " +
                            "wrong type.");
                  }
                }
                throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" doesn't exist.");
              }
            }
          }
          connection.close();
        } catch (Exception e) {
          throw new WrongAnswer("An exception was thrown, while trying to check the database schema - " + e.getMessage());
        }
      }

      void checkConnection() {
        try {
          Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException e) {
          throw new WrongAnswer("An exception was thrown, while trying to connect to database. PostgreSQL JDBC Driver is " +
                  "not found.");
        }
        Connection connection = null;
        try {
          connection = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (SQLException e) {
          throw new WrongAnswer("An exception was thrown, while trying to connect to database. Connection Failed");
        }

        if (connection == null) {
          throw new WrongAnswer("Failed to make connection to database");
        }
      }

      @DynamicTest(order = 1)
      public CheckResult normalExe12Test() {

        checkConnection();
        Connection connection = null;
        try {
          connection = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
        }
        try {
          Statement statement = connection.createStatement();
          statement.executeUpdate("DROP TABLE if exists plan");
          statement.executeUpdate("DROP TABLE if exists ingredients");
          statement.executeUpdate("DROP TABLE if exists meals");
        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
        }

        CheckOutput co = new CheckOutput();
        if (!co.start("What would you like to do (add, show, plan, exit)?"))
          return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, exit)" +
                  "?\"");
        ArrayList<dbTable> tables = new ArrayList<>(Arrays.asList(
                new dbTable("ingredients", new ArrayList<>(
                        Arrays.asList(
                                new Column("ingredient", "varchar"),
                                new Column("ingredient_id", "int4"),
                                new Column("meal_id", "int4")
                        )
                )),
                new dbTable("meals", new ArrayList<>(
                        Arrays.asList(
                                new Column("category", "varchar"),
                                new Column("meal", "varchar"),
                                new Column("meal_id", "int4")
                        )
                ))
        ));
        checkTableSchema(tables);

        if (!co.input("exit", "Bye!"))
          return CheckResult.wrong("Your output should contain \"Bye!\"");
        if (!co.programIsFinished())
          return CheckResult.wrong("The application didn't exit.");
        return CheckResult.correct();
      }

      @DynamicTest(order = 2)
      CheckResult normalExe13Test() {
        checkConnection();
        Connection connection = null;
        try {
          connection = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
        }
        try {
          Statement statement = connection.createStatement();
          statement.executeUpdate("DROP TABLE if exists plan");
          statement.executeUpdate("DROP TABLE if exists ingredients");
          statement.executeUpdate("DROP TABLE if exists meals");
        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
        }

        try {
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");

          if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
            return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                    "?\"");

          if (!co.input("lunch", "Input the meal's name:"))
            return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");

          if (!co.input("sushi", "Input the ingredients:"))
            return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");

          if (!co.input("salmon, rice, avocado", "The meal has been added!"))
            return CheckResult.wrong("Your output should contain \"The meal has been added!\"");

          if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");

          if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
            return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                    "?\"");

          if (!co.input("lunch", "Input the meal's name:"))
            return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");

          if (!co.input("omelette", "Input the ingredients:"))
            return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");

          if (!co.input("eggs, milk, cheese", "The meal has been added!"))
            return CheckResult.wrong("Your output should contain \"The meal has been added!\"");

          if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");

          if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
            return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                    "?\"");

          if (!co.input("breakfast", "Input the meal's name:"))
            return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");

          if (!co.input("oatmeal", "Input the ingredients:"))
            return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");

          if (!co.input("oats, milk, banana, peanut butter", "The meal has been added!"))
            return CheckResult.wrong("Your output should contain \"The meal has been added!\"");

          if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");

          if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
            return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                    "lunch, dinner)?\"");

          if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                  "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
            return CheckResult.wrong("Wrong \"show\" output for a saved meal.");

          if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");

          if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
            return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                    "lunch, dinner)?\"");

          if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                  "milk", "banana", "peanut butter"))
            return CheckResult.wrong("Wrong \"show\" output for a saved meal.");

          if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");

          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");

          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");
        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown while testing - " + e);
        }

        return CheckResult.correct();
      }

      @DynamicTest(order = 3)
      CheckResult normalExe14Test() {
        checkConnection();
        Connection connection = null;
        try {
          connection = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
        }

        try {
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");

          if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
            return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                    "lunch, dinner)?\"");

          if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                  "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
            return CheckResult.wrong("Wrong \"show\" output for a saved meal.");

          if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");

          if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
            return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                    "lunch, dinner)?\"");

          if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                  "milk", "banana", "peanut butter"))
            return CheckResult.wrong("Wrong \"show\" output for a saved meal.");

          if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");

          if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
            return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                    "lunch, dinner)?\"");

          if (!co.input("brunch", "Wrong meal category! Choose from: breakfast, lunch, dinner."))
            return CheckResult.wrong("Wrong output after the input of a category that doesn't exist.");

          if (!co.input("dinner", "No meals found."))
            return CheckResult.wrong("Wrong output for a category with no added meals.");

          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");

          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");
        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown while testing - " + e);
        }

        return CheckResult.correct();
      }

      @DynamicTest(order = 4)
      CheckResult normalExe15Test() {
        checkConnection();
        Connection connection = null;
        try {
          connection = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
        }
        try {
          Statement statement = connection.createStatement();
          statement.executeUpdate("DROP TABLE if exists ingredients");
          statement.executeUpdate("DROP TABLE if exists plan");
          statement.executeUpdate("DROP TABLE if exists meals");
        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
        }

        try {
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, plan, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                    "exit)?\"");


          for (MyMealTestData meal : mealsList) {
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, " +
                      "dinner)?\"");

            if (!co.input(meal.mealCategory, "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");

            if (!co.input(meal.mealName, "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");

            if (!co.input(String.join(",", meal.ingredients), "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");

            if (!co.inputNext("What would you like to do (add, show, plan, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "exit)?\"");

          }

          co.getNextOutput("plan");
          int index = 0;
          for (String day : days) {
            if (!co.inputNext(day))
              return CheckResult.wrong("Your output should contain \"" + day + "\"");

            String[] categories = new String[]{"breakfast", "lunch", "dinner"};
            String[][] alphabetic = {
                    new String[]{"english breakfast", "oatmeal", "sandwich", "scrambled eggs"},
                    new String[]{"chicken salad", "omelette", "salad", "sushi"},
                    new String[]{"beef steak", "pizza", "pumpkin soup", "tomato soup"}
            };
            for (int i = 0; i < 3; i++) {
              String category = categories[i];
              if (!co.inputNext(alphabetic[i]))
                return CheckResult.wrong("Make sure that formatting of your output is similar to the one in the example. " +
                        "Also, your output should contain the meals in alphabetic order.");

              if (!co.inputNext("Choose the " + category + " for " + day + " from the list above:"))
                return CheckResult.wrong("Your output should contain the prompt for the " + category + " meal.");

              if (!co.input("nonExistMeal", "This meal doesn’t exist. Choose a meal from the list above."))
                return CheckResult.wrong("Your output should contain \"This meal doesn’t exist. Choose a meal from the " +
                        "list above.\"");

              co.getNextOutput(((MyMealTestData) (Arrays.stream(mealsList).filter(x -> x.mealCategory.equals(category)).toArray()[index % 4])).mealName);
            }
            if (!co.inputNext("Yeah! We planned the meals for " + day + "."))
              return CheckResult.wrong("Your output should contain \"Yeah! We planned the meals for " + day + ".\".");
            index++;
          }

          String[] planPrintout = new String[]{"Monday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin " +
                  "soup",
                  "Tuesday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                  "Wednesday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza",
                  "Thursday", "Breakfast: english breakfast", "Lunch: salad", "Dinner: tomato soup",
                  "Friday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin soup",
                  "Saturday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                  "Sunday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza"};

          for (String line : planPrintout) {
            if (!co.inputNext(line))
              return CheckResult.wrong("Your output should contain \"" + line + "\".");
          }

          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");

          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");

        } catch (Exception e) {
          return CheckResult.wrong("An exception was thrown while testing - " + e);
        }

        return CheckResult.correct();
      }

    }


    class CheckOutput {
      private TestedProgram main = new TestedProgram();
      private int position = 0;
      private boolean caseInsensitive = true;
      private boolean trimOutput = true;
      private List<String> arguments = new ArrayList<>();
      private boolean isStarted = false;
      private String lastOutput = "";

      private boolean checkOutput(String outputString, String... checkStr) {
        int searchPosition = position;
        for (String cStr : checkStr) {
          String str = caseInsensitive ? cStr.toLowerCase() : cStr;
          int findPosition = outputString.indexOf(str, searchPosition);
          if (findPosition == -1) return false;
          if (!outputString.substring(searchPosition, findPosition).isBlank()) return false;
          searchPosition = findPosition + str.length();
        }
        position = searchPosition;
        return true;
      }

      public boolean start(String... checkStr) {
        if (isStarted)
          return false;
        var outputString = main.start(arguments.toArray(new String[]{}));
        lastOutput = outputString;
        if (trimOutput) outputString = outputString.trim();
        if (caseInsensitive) outputString = outputString.toLowerCase();
        isStarted = true;
        return checkOutput(outputString, checkStr);
      }

      public void stop() {
        main.stop();
      }

      public boolean input(String input, String... checkStr) {
        if (main.isFinished()) return false;
        String outputString = main.execute(input);
        lastOutput = outputString;
        if (trimOutput) outputString = outputString.trim();
        if (caseInsensitive) outputString = outputString.toLowerCase();
        position = 0;
        return checkOutput(outputString, checkStr);
      }

      public boolean inputNext(String... checkStr) {
        String outputString = lastOutput;
        if (trimOutput) outputString = outputString.trim();
        if (caseInsensitive) outputString = outputString.toLowerCase();
        return checkOutput(outputString, checkStr);
      }

      public String getNextOutput(String input) {
        if (main.isFinished()) return "";
        String outputString = main.execute(input);
        lastOutput = outputString;
        position = 0;
        return outputString;
      }

      public String getLastOutput() {
        return lastOutput;
      }

      public boolean programIsFinished() {
        return main.isFinished();
      }

      public void setArguments(String... arguments) {
        this.arguments = Arrays.stream(arguments).toList();
      }

      public void setCaseInsensitive(boolean caseInsensitive) {
        this.caseInsensitive = caseInsensitive;
      }

      public void setTrimOutput(boolean trimOutput) {
        this.trimOutput = trimOutput;
      }
    }
  learner_created: false
- name: src/mealplanner/Dinner.java
  visible: true
  text: |
    package mealplanner;

    import java.util.LinkedHashSet;

    public class Dinner extends Meal{
        @Override
        public void setIngredients(String i) {
            super.setIngredients(i);
        }

        @Override
        public LinkedHashSet<String> getIngredients() {
            return super.getIngredients();
        }

        public Dinner(String name , String category)
        {
            super(name,category);
        }

        @Override
        public void addingredient() {
            super.addingredient();
        }

        @Override
        public String getName() {
            return super.getName();
        }

        @Override
        public String getCategory() {
            return super.getCategory();
        }

        @Override
        public void print() {
            super.print();
        }
    }
  learner_created: true
- name: src/mealplanner/Meal.java
  visible: true
  text: |
    package mealplanner;

    import java.util.LinkedHashSet;
    import java.util.Scanner;

    public class Meal   {
        private String name;
        private String category;
        private final LinkedHashSet<String> ingredients = new LinkedHashSet<>();
        static int  Ing_id = 0;
        public Meal(String name,String category){
            this.name = name;
            this.category = category;
        }
        public Meal(){

        }
        public void addingredient()
        {
            System.out.println("Input the ingredients:");
            Scanner scan = new Scanner(System.in);
            boolean valid = false;


            while( !valid) {

                //scan.nextLine();
                String line = scan.nextLine().trim();

                String[] ings = line.split(", ");

                boolean ok = true;

                for (String i : ings) {
                    if (!i.matches("[a-zA-Z ]+")){
                        ok = false;
                        break;
                    } else {
                        ingredients.add(i);
                    }
                }

                if(!ok){
                    ingredients.clear();
                    System.out.println("Wrong format. Use letters only!");
                }else{
                    valid = true;
                }

            }
            System.out.println("The meal has been added!");
           // ingredients.forEach(elem -> System.out.println(elem+" "));
        }
        public void print(){
           // System.out.println("Category: " + category);

            System.out.println("Name: " + name);

            System.out.println("Ingredients: ");
            ingredients.forEach(System.out::println);
            System.out.println("");



        }
        public void setIngredients(String i)
        {
            ingredients.add(i);
        }
        public LinkedHashSet<String> getIngredients()
        {
            return ingredients;
        }

        public String getName() {
            return name;
        }

        public String getCategory() {
            return category;
        }
        public static void nextId() {
            Ing_id++;
        }

    }
  learner_created: true
- name: src/mealplanner/Menu.java
  visible: true
  text: "package mealplanner;\n\nimport java.sql.*;\nimport java.util.*;\n\npublic\
    \ class Menu {\n\n    public static LinkedHashSet<Meal> meals = new LinkedHashSet<>();\
    \ // linkedHashSet -> to reserve the order\n    public static HashSet<Integer>\
    \  s = new HashSet<>();\n\n\n    static int last_id;\n    static Scanner scan\
    \ = new Scanner(System.in);\n\n    String DB_URL = \"jdbc:postgresql:meals_db\"\
    ;\n    String USER = \"postgres\";\n    String PASS = \"1111\";\n    Connection\
    \ connection ;\n    Statement statement ;\n\n    public Menu() throws SQLException,\
    \ ClassNotFoundException {\n        \n       this.connection = DriverManager.getConnection(DB_URL,\
    \ USER, PASS);\n       this.statement = connection.createStatement();\n      \
    \  statement.executeUpdate(\"CREATE table IF NOT EXISTS meals (\" +\n        \
    \        \"meal_id integer,\" +\n                \"category varchar(50),\" +\n\
    \                \"meal varchar(60)\"+\n                \")\");\n        statement.executeUpdate(\"\
    CREATE table IF NOT EXISTS ingredients (\" +\n                \"meal_id integer,\"\
    \ +\n                \"ingredient varchar(50),\" +\n                \"ingredient_id\
    \ integer\"+\n                \")\");\n    }\n    public void loadDataBase() throws\
    \ SQLException {\n\n        ResultSet rs = statement.executeQuery(\"select * from\
    \ meals\");\n\n        while (rs.next()) {\n\n            String type =  rs.getString(\"\
    category\");\n            String name =  rs.getString(\"meal\");\n           \
    \ last_id = rs.getInt(\"meal_id\");\n            Meal m = new Meal(name,type);\n\
    \            meals.add(m);\n        }\n        List<Meal>tmp = new ArrayList<>(meals);\n\
    \        int ind = 1;\n\n        while (ind <= tmp.size()) {\n            rs =\
    \ statement.executeQuery(\"select * from ingredients where meal_id = \" + Integer.toString(ind));\n\
    \            while (rs.next()) {\n                String s = rs.getString(\"ingredient\"\
    );\n                tmp.get(ind-1).setIngredients(s);\n            }ind++;\n \
    \       }\n\n\n    }\n    public LinkedList<Meal> LoadType(String type) throws\
    \ SQLException {\n\n        LinkedList<Meal> res = new LinkedList<>();\n     \
    \   ResultSet rs = statement.executeQuery(\"select * from meals where category\
    \ = \" +type);\n\n        Map<Integer,Meal> m= new LinkedHashMap<>();\n\n    \
    \    while (rs.next()) {\n            String t = rs.getString(\"category\");\n\
    \            String name = rs.getString(\"meal\");\n            int meal_id =\
    \ rs.getInt(\"meal_id\");\n            Meal meal = new Meal(name,t);\n       \
    \     m.put(meal_id,meal);\n\n        }\n\n        for (Map.Entry<Integer , Meal>\
    \ entry : m.entrySet()) {\n            rs = statement.executeQuery(\"select ingredient\
    \ from ingredients where meal_id = \"\n                    + Integer.toString(entry.getKey()));\n\
    \            while (rs.next())\n            {\n                String ing = rs.getString(\"\
    ingredient\");\n                entry.getValue().setIngredients(ing);\n      \
    \      }\n            res.add(entry.getValue());\n        }\n\n        return\
    \ res;\n    }\n    public void SaveToDataBase(Meal meal) throws SQLException {\n\
    \        statement.executeUpdate(\"insert into meals (category, meal,meal_id)\
    \ values (\"+ String.format(\"'%s'\",meal.getCategory())+\", \"+String.format(\"\
    '%s'\",meal.getName())+\", \"+Integer.toString(++last_id) + \")\");\n\n      \
    \  LinkedHashSet<String> s = meal.getIngredients();\n        for (String i : s)\
    \ {\n            statement.executeUpdate(\"insert into ingredients (ingredient,\
    \ ingredient_id,meal_id) values(\" + String.format(\"'%s'\",i) + \", \"+Integer.toString(Meal.Ing_id)\n\
    \                                    +\", \"+ Integer.toString(last_id) +\")\"\
    \ );\n            Meal.nextId();\n        }\n\n    }\n   private static String\
    \ ReadName() // utilities\n    {\n        System.out.println(\"Input the meal's\
    \ name:\");\n        String name  = scan.nextLine();\n        while(!name.matches(\"\
    [a-zA-Z ]+\") ) {\n            System.out.println(\"Wrong format. Use letters\
    \ only!\");\n            name = scan.nextLine();\n        }\n        return name;\n\
    \    }\n    public  void add() throws SQLException {\n\n\n\n        System.out.println(\"\
    Which meal do you want to add (breakfast, lunch, dinner)?\");\n        String\
    \ type,name;\n        Meal tmp;\n\n        while(true) {\n\n             type\
    \ = scan.nextLine().trim().toLowerCase();\n\n                if( type.equals(\"\
    breakfast\")) {\n\n                    name = ReadName();\n                  \
    \  Meal m = new Breakfast(name, type);\n                    m.addingredient();\n\
    \                    meals.add(m);\n                    tmp = m;\n           \
    \         break ;\n\n                }else if (type.equals(\"lunch\")) {\n\n \
    \                    name = ReadName();\n                    Meal m = new Launch(name,\
    \ type);\n                    m.addingredient();\n                    meals.add(m);\n\
    \                    tmp = m;\n                    break ;\n\n               \
    \ }\n                 else if(type.equals(\"dinner\")) {\n\n                 \
    \    name = ReadName();\n                    Meal m = new Dinner(name, type);\n\
    \                    m.addingredient();\n                    meals.add(m);\n \
    \                   tmp = m;\n                    break ;\n                }else\
    \ {\n                     System.out.println(\"Wrong meal category! Choose from:\
    \ breakfast, lunch, dinner.\");\n                }\n        }\n        SaveToDataBase(tmp);\n\
    \n\n    }\n\n    private void printType( String type) throws SQLException {\n\
    \        LinkedList<Meal> res = LoadType(String.format(\"'%s'\" , type));\n  \
    \      if(res.isEmpty()) {\n            System.out.println(\"No meals found.\"\
    );\n        }\n\n        System.out.println(\"Category: \"+type+\"\\n\" );\n \
    \       for(Meal m : res)\n        {\n            if(m.getCategory().equals(type))\n\
    \            {\n                m.print();\n            }\n        }\n\n    }\n\
    \    public void show() throws SQLException {\n\n\n        \n\n            while\
    \ (true) {\n\n                System.out.println(\"Which category do you want\
    \ to print (breakfast, lunch, dinner)?\");\n                String input = scan.nextLine();\n\
    \                if(input.equals(\"breakfast\") || input.equals(\"lunch\") ||\
    \ input.equals(\"dinner\") ) {\n                    printType(input);break;\n\
    \                }else {\n                    System.out.println(\"Wrong meal\
    \ category! Choose from: breakfast, lunch, dinner.\");\n                }\n\n\n\
    \            }\n\n\n     }\n     public  void run() throws SQLException {\n\n\n\
    \         connection.setAutoCommit(true);\n         loadDataBase();\n        \
    \ \n         label:\n         while(true)\n         {\n             System.out.print(\"\
    What would you like to do (add, show, exit)?\\n\");\n             String input\
    \ = scan.nextLine().toLowerCase();\n             switch (input) {\n          \
    \       case \"add\":\n                     add();\n                     break;\n\
    \                 case \"show\":\n                     show();\n             \
    \        break;\n                 case \"exit\":\n                     System.out.println(\"\
    Bye!\");\n                     break label;\n             }\n\n         }\n  \
    \       statement.close();\n         connection.close();\n     }\n\n\n\n\n}\n"
  learner_created: true
- name: src/mealplanner/Launch.java
  visible: true
  text: |
    package mealplanner;

    import java.util.LinkedHashSet;

    public class Launch extends Meal{

        public Launch(String name , String category)
        {
            super(name,category);
        }

        @Override
        public void addingredient() {
            super.addingredient();
        }

        @Override
        public String getName() {
            return super.getName();
        }

        @Override
        public String getCategory() {
            return super.getCategory();
        }

        @Override
        public void setIngredients(String i) {
            super.setIngredients(i);
        }

        @Override
        public LinkedHashSet<String> getIngredients() {
            return super.getIngredients();
        }

        @Override
        public void print() {
            super.print();
        }
    }
  learner_created: true
- name: src/mealplanner/Breakfast.java
  visible: true
  text: |
    package mealplanner;

    import java.util.LinkedHashSet;

    public class Breakfast extends Meal {

        public Breakfast(String name , String category)
        {
            super(name,category);
        }

        @Override
        public void setIngredients(String i) {
            super.setIngredients(i);
        }

        @Override
        public String getName() {
            return super.getName();
        }

        @Override
        public String getCategory() {
            return super.getCategory();
        }

        @Override
        public LinkedHashSet<String> getIngredients() {
            return super.getIngredients();
        }

        @Override
        public void addingredient() {
            super.addingredient();
        }

        @Override
        public void print() {
            super.print();
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/25575#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 17 Jul 2023 10:47:08 UTC"
record: 5
